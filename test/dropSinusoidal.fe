// dropSinusoidal.fe
// This file is to investigate contact angle hysteresis
// of a drop on a sinusoidal surface.
//
// Written by Michael S. Bell
// msb5390@gmail.com
// May 18, 2015


STRING
SPACE_DIMENSION 2

gravity_constant 0 // turn off initially

PARAMETER thetaE = 115.0	// Intrinsic CA of the surface.
PARAMETER tilt_angle = 0 	// Define the tilt angle.
PARAMETER Bo = 0.200000		// Bond number (controls strength of gravity)
PARAMETER amp = 0.1		// Amplitude of surface
PARAMETER lambda = 1.0		// Wavelength of surface
PARAMETER contact_angle_right = 0
PARAMETER contact_angle_right_app = 0

#define SURFT -cos(thetaE*pi/180.0) // Solid-liquid surface tension
#define G 0.5	// Used for spacing of vertices on the boundary.






// right CL boundary
// specifies the content and energy associated with
// the right vertex that is confined to the boundary.
boundary 1 parameters 1
x1: p1
x2: -amp*cos(2*pi/lambda*p1) + amp
// Energy is gravitational potential due to the
// liquid in the grooves + the solid-liquid
// surface tension contribution, which is just
// the arc length time the surface tension.
energy:
e1: -Bo*(amp^2*cos(tilt_angle*pi/180.0)/2*(lambda/(8*pi)*sin(4*pi*p1/lambda)-lambda/pi*sin(2*pi*p1/lambda)+1.5*p1)+pi*amp*sin(tilt_angle*pi/180.0)/lambda*(-lambda*x^2/(2*pi)*cos(2*pi*p1/lambda)+lambda^2*x/(2*pi^2)*sin(2*pi*p1/lambda)+lambda^3/(4*pi^3)*(cos(2*pi*p1/lambda)-1))) + SURFT*(lambda/(2*pi))*incompleteEllipticE(2*pi*x/lambda, -(2*pi*amp/lambda)^2)
// Account for volume contribution we would have got
// if we had explicitly modeled the solid-liquid
// faces beneath the drop.
content:
c1: amp*lambda/2/pi*sin(2*pi/lambda*x) - amp*x






// left CL boundary
// specifies the content and energy associated with
// the left vertex that is confined to the boundary.
boundary 2 parameters 1
x1: p1
x2: -amp*cos(2*pi/lambda*p1) + amp
// Energy is gravitational potential due to the
// liquid in the grooves + the solid-liquid
// surface tension contribution, which is just
// the arc length time the surface tension.
energy:
e1: Bo*(amp^2*cos(tilt_angle*pi/180.0)/2*(lambda/(8*pi)*sin(4*pi*p1/lambda)-lambda/pi*sin(2*pi*p1/lambda)+1.5*p1)+pi*amp*sin(tilt_angle*pi/180.0)/lambda*(-lambda*x^2/(2*pi)*cos(2*pi*p1/lambda)+lambda^2*x/(2*pi^2)*sin(2*pi*p1/lambda)+lambda^3/(4*pi^3)*(cos(2*pi*p1/lambda)-1))) - SURFT*(lambda/(2*pi))*incompleteEllipticE(2*pi*x/lambda, -(2*pi*amp/lambda)^2)
// Account for volume contribution we would have got
// if we had explicitly modeled the solid-liquid
// faces beneath the drop.
content:
c1: amp*lambda/2/pi*sin(2*pi/lambda*x) - amp*x






// This boundary exists just for displaying the sinusoidal
// surface. There is no content or energy associated with
// it.
boundary 3 parameters 1
x1: p1
x2: -amp*cos(2*pi/lambda*p1) + amp

quantity alv info_only method edge_length


// Gravitational vector field which gives gravitational
// potential energy when integrated around the perimeter
// of the drop, via Stokes Theorem.
quantity grav energy method edge_vector_integral
vector_integrand:
q1: -y^2/2*Bo*cos(tilt_angle*pi/180.0)
q2: -x^2/2*Bo*sin(tilt_angle*pi/180.0)





// Prevent any vertex or edge from "falling through"
// the surface.
constraint 1 nonnegative
formula: y + amp*cos(2*pi/lambda*x) - amp






vertices:
/* Droplet vertices are listed first. */
1   3*G/2.0 boundary 1
2   5*G/2.0 0.75 constraint 1
3   3*G/2.0 1.5 constraint 1
4   0.0 2.0 constraint 1
5  -(3*G/2.0) 1.5 constraint 1
6  -5*G/2.0 0.75 constraint 1 
7  	-3*G/2 boundary 2

/* The fixed (display) surface (substrate) vertices. */
8 -4.0*G boundary 3 fixed
9 -7.0*G/2.0 boundary 3 fixed
10 -3.0*G boundary 3 fixed
11 -5.0*G/2.0 boundary 3 fixed
12 -2.0*G boundary 3 fixed
13 -3*G/2.0 boundary 3 fixed
14 -G boundary 3 fixed
15 -G/2.0 boundary 3 fixed
16 0.0 boundary 3 fixed
17 G/2.0 boundary 3 fixed
18 G boundary 3 fixed
19 3*G/2.0 boundary 3 fixed 
20 2*G boundary 3 fixed
21 5.0*G/2.0 boundary 3 fixed
22 3*G boundary 3 fixed
23 7.0*G/2.0 boundary 3 fixed
24 4*G boundary 3 fixed






edges:
/* Droplet edges are listed first. */
1   1 2 density 1 constraint 1 grav alv
2   2 3 density 1 constraint 1 grav alv
3   3 4 density 1 constraint 1 grav alv
4   4 5 density 1 constraint 1 grav alv
5   5 6 density 1 constraint 1 grav alv
6   6 7 density 1 constraint 1 grav alv

/* The display surface edges. */
7  8 9 density 0 boundary 3 fixed noncontent
8  9 10 density 0 boundary 3 fixed noncontent
9  10 11 density 0 boundary 3 fixed noncontent
10  11 12 density 0 boundary 3 fixed noncontent
11  12 13 density 0 boundary 3 fixed noncontent
12  13 14 density 0 boundary 3 fixed noncontent
13  14 15 density 0 boundary 3 fixed noncontent
14  15 16 density 0 boundary 3 fixed noncontent
15  16 17 density 0 boundary 3 fixed noncontent
16  17 18 density 0 boundary 3 fixed noncontent
17  18 19 density 0 boundary 3 fixed noncontent
18  19 20 density 0 boundary 3 fixed noncontent
19  20 21 density 0 boundary 3 fixed noncontent
20  21 22 density 0 boundary 3 fixed noncontent
21  22 23 density 0 boundary 3 fixed noncontent
22  23 24 density 0 boundary 3 fixed noncontent





/* Connect the droplet edges to form a face. */
faces:
1   1 2 3 4 5 6 constraint 1



/* The body is just the one face we made. */
bodies:
1   1  volume Pi density 1





read

read "zebra.cmd"
{refine edges where on_boundary 3;} 5
zebra
window_aspect_ratio:=1



// Some commands to help with the evolution process.


// refine and update the zebra pattern
rz := { refine edges where not on_boundary 3; zebra;
      }


// Function to return the apparent CA at right contact line.
car_app := {if edge[1].x/edge[1].y > 0 then contact_angle_right_app := 180.0-atan(edge[1].y/edge[1].x)*180.0/pi
	    else contact_angle_right_app := -atan(edge[1].y/edge[1].x)*180.0/pi;}


// Function to return the actual CA at the right contact line.
//car := {if edge[1].x/edge[1].y > 0 then printf "%3.2f\n", atan(2*pi*amp/lambda*sin(2*pi*vertex[1].x/lambda))*180/pi+180.0-atan(edge[1].y/edge[1].x)*180.0/pi
//	else printf "%3.2f\n", atan(2*pi*amp/lambda*sin(2*pi*vertex[1].x/lambda))*180/pi-atan(edge[1].y/edge[1].x)*180.0/pi;}

car := {if edge[1].x/edge[1].y > 0 then contact_angle_right := atan(2*pi*amp/lambda*sin(2*pi*vertex[1].x/lambda))*180/pi+180.0-atan(edge[1].y/edge[1].x)*180.0/pi
	else contact_angle_right := atan(2*pi*amp/lambda*sin(2*pi*vertex[1].x/lambda))*180/pi-atan(edge[1].y/edge[1].x)*180.0/pi;}


// Function to return the apparent CA at the left contact line.
cal_app := {foreach vertex[7].edge do myEdge:=id;
	set edge[myEdge] color red;
	print myEdge;
	if edge[myEdge].x/edge[myEdge].y > 0 then printf "%3.2f\n", atan(edge[myEdge].y/edge[myEdge].x)*180.0/pi
        else printf "%3.2f\n", 180 + atan(edge[myEdge].y/edge[myEdge].x)*180.0/pi;
	set edge[myEdge] color white;}



// Function to return the actual CA at the left contact line.
cal := {foreach vertex[7].edge do myEdge:=id;
	set edge[myEdge] color red;
	print myEdge;
	if edge[myEdge].x/edge[myEdge].y > 0 then printf "%3.2f\n", -atan(2*pi*amp/lambda*sin(2*pi*vertex[7].x/lambda))*180/pi+atan(edge[myEdge].y/edge[myEdge].x)*180.0/pi
	else printf "%3.2f\n", -atan(2*pi*amp/lambda*sin(2*pi*vertex[7].x/lambda))*180/pi+ 180 + atan(edge[myEdge].y/edge[myEdge].x)*180.0/pi;
	set edge[myEdge] color white;}

go1 := {g 50;
	rz;
	g 400;
	print "Now set Bo and tilt_angle!";}

go2 := {g 1700;
	rz;
	g 13000;
	print "car = "; car;
	print "cal = "; cal;
	print "xA = "; print vertex[1].x;
	print "xR = "; print vertex[7].x;
	print "car_app = "; car_app;
	print "cal_app = "; cal_app;
	}

fun := {rz 3;
	Bo := 1;
	{V 100; g 10;} 20;
	}

//End Of Input
